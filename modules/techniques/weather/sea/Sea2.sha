VertexShader vs_Sea2
{
	decl
	{
        stream[0];

        float v0[3];	// Position
        float v1[3];	// Normal
        float v2[2];	// Tex coord 0
    }
	asm
	{
		 vs.1.1

		m4x4 r0, v0, c[24 ]
		mov  oPos, r0
		 
		mul r11.z, r0.z, c[1  ].w  
		expp r11.z, r11.z  
		rcp r11.z, r11.z  
		mov oFog.x, r11.z

		mov r4, v1
		 
		dp3 r4.w, r4, r4 
		rsq r4.w, r4.w 
		mul r4, r4, r4.w 

		sub r1, v0, c[23  ]
		 
		dp3 r1.w, r1, r1 
		rsq r1.w, r1.w 
		mul r1, r1, r1.w  
		 
		dp3 r7 .x, r1, r4 
		mov r5.x, -r7 .x
		mov r5.yz, c[28 + 6].xxy
		  
		mul r10.xy,  r5.xy,  r5.xy  
		mad r10.z, r10.y, r10.x, -r10.y  
		add r10.z, r10.z, c[0  ].y 
		 
		rsq r9.x, r10.z  
		mul r9.x, r10.z, r9.x  
		 
		mad r10.y,  r5.y, r9.x,  r5.x  
		mad r10.x, - r5.y, r9.x,  r5.x  
		rcp r9.y, r10.y  
		 
		mad r10.w,  r5.y,  r5.x, r9.x  
		mad r10.z,  r5.y,  r5.x, -r9.x   
		rcp r9.z, r10.w  
		 
		mul r9.yz, r9.xyz, r10.xxz 
		mul r9.xw, r9.yyyz, r9.yyyz 
		 
		add r7 .y, r9.x, r9.w 
		mul r7 .y, r7 .y, c[0  ].z  
		min r7 .y, r7 .y,  r5.z 
		 
		rcp r2.x, r1.y
		mul r2.x, r2.x, c[28].x
		min r2.x, r2.x, -r2.x
		expp r7 .z, r2.x 

		mul r2.y, c[28].y, r7 .y
		dp3 r3.x, c[28 + 30], r4
		mul r3.y, r3.x, r2.y
		mul oD0.xyz, r3.yyy, c[28 + 2] 

		mad r2.x, -r7 .y, r7 .z, r7 .z
		mul oD0.w, r2.x, c[28].z 

		sub r2.xy, c[0  ].yy, r7 .yz 
		mul r2.z, r2.x, r2.y
		mul oD1.xyz, r2.zzz, c[28 + 1] 
		mov oD1.w, c[0  ].y 

		dp3 r3.x, r1, r4
		add r3.x, r3.x, r3.x
		mad r2.xyz, r3.xxx, r4, -r1
		  
		mul r10,  r4.yzxw,  c[28 + 5].zxyw 
		mad r10, - c[28 + 5].yzxw,  r4.zxyw, r10 
		  
		mul r11,  r4.yzxw,  r10.zxyw 
		mad r11, - r10.yzxw,  r4.zxyw, r11          

		; Normalize S and T
		dp3 r10.w, r10, r10
		rsq r10.w, r10.w
		mul r10, r10, r10.w

		dp3 r11.w, r11, r11
		rsq r11.w, r11.w
		mul r11, r11, r11.w

		; here we compute SxT (if V_SxT is available, then this is unnecessary, of course)
		mul r9, r10.zxyw, r11.yzxw           ; 2 instruction cross product
		mad r9, r10.yzxw, r11.zxyw, -r9

		dp3 oT1.x, r10,  c[28 + 8]
		dp3 oT1.y, r11,  c[28 + 8]
		dp3 oT1.z, r9,  c[28 + 8]

		dp3 oT2.x, r10,  c[28 + 9]
		dp3 oT2.y, r11,  c[28 + 9]
		dp3 oT2.z, r9,   c[28 + 9]

		dp3 oT3.x, r10,  c[28 + 10]
		dp3 oT3.y, r11,  c[28 + 10]
		dp3 oT3.z, r9,  c[28 + 10]

		mov oT1.w, -r1.x
		mov oT2.w, -r1.y
		mov oT3.w, -r1.z
		 
		mov oT0.z, c[2  ].x
		mov oT0.xy, v2
	}
}

VertexShader vs_Sea2Sunroad
{
	decl
	{
        stream[0];

        float v0[3];	// Position
        float v1[3];	// Normal
        float v2[2];	// Tex coord 0
    }
	asm
	{
		 vs.1.1

		m4x4 r0, v0, c[24 ]
		mov  oPos, r0
		 
		mul r11.z, r0.z, c[1  ].w  
		expp r11.z, r11.z  
		rcp r11.z, r11.z  
		mov oFog.x, r11.z

		mov r4, v1
		 
		dp3 r4.w, r4, r4 
		rsq r4.w, r4.w 
		mul r4, r4, r4.w 

		sub r1, v0, c[23  ]
		 
		dp3 r1.w, r1, r1 
		rsq r1.w, r1.w 
		mul r1, r1, r1.w  
		 
		dp3 r3.x, r1, r4
		add r3.x, r3.x, r3.x
		mad r2.xyz, r3.xxx, r4, -r1
		  
		mul r10,  r4.yzxw,  c[28 + 5].zxyw 
		mad r10, - c[28 + 5].yzxw,  r4.zxyw, r10 
		  
		mul r11,  r4.yzxw,  r10.zxyw 
		mad r11, - r10.yzxw,  r4.zxyw, r11          

		; Normalize S and T
		dp3 r10.w, r10, r10
		rsq r10.w, r10.w
		mul r10, r10, r10.w

		dp3 r11.w, r11, r11
		rsq r11.w, r11.w
		mul r11, r11, r11.w

		; here we compute SxT (if V_SxT is available, then this is unnecessary, of course)
		mul r9, r10.zxyw, r11.yzxw           ; 2 instruction cross product
		mad r9, r10.yzxw, r11.zxyw, -r9

		dp3 oT1.x, r10,  c[28 + 8]
		dp3 oT1.y, r11,  c[28 + 8]
		dp3 oT1.z, r9,  c[28 + 8]

		dp3 oT2.x, r10,  c[28 + 9]
		dp3 oT2.y, r11,  c[28 + 9]
		dp3 oT2.z, r9,   c[28 + 9]

		dp3 oT3.x, r10,  c[28 + 10]
		dp3 oT3.y, r11,  c[28 + 10]
		dp3 oT3.z, r9,  c[28 + 10]

		mov oT1.w, -r1.x
		mov oT2.w, -r1.y
		mov oT3.w, -r1.z
		 
		mov oT0.z, c[2  ].x
		mov oT0.xy, v2
	}
}

PixelShader ps_Sea2
{
	asm
	{
		ps.1.1

		tex t0	

		texm3x3pad t1, t0_bx2
		texm3x3pad t2, t0_bx2
		texm3x3vspec t3, t0_bx2

		mad r0.xyz, v0, t3, v1
		mov r0.w, v0.w
	}
}

PixelShader ps_Sea2SunRoad
{
	asm
	{
		ps.1.1

		tex t0	

		texm3x3pad t1, t0_bx2
		texm3x3pad t2, t0_bx2
		texm3x3vspec t3, t0_bx2

		mov r0, t3
	}
}

block Sea2_SunRoad()
{
	technique t0
	{
		pass p0
		{
			CullMode = none;
			ColorVertex = true;
			FogEnable = false;
			SrcBlend = one;
			DestBlend = one;

		    AlphaBlendEnable = true;
			AlphaTestEnable = false;

			VertexShader = "vs_Sea2Sunroad";
			PixelShader = "ps_Sea2SunRoad";

			Render.Draw

			Restore.States
		}
	}
}

block Sea2()
{
	technique t0
	{
		pass p0
		{
			FogTableMode = none;
			FogVertexMode = none;
			CullMode = none;
			ColorVertex = true;
			SpecularEnable = false;
			SrcBlend = one;
			DestBlend = srcalpha;
			Lighting = false;
			LocalViewer = false;
			NormalizeNormals = false;

		    AlphaBlendEnable = true;
			AlphaTestEnable = false;

			VertexShader = "vs_Sea2";
			PixelShader = "ps_Sea2";

			Render.Draw

			Restore.States
		}
	}
}



VertexShader vs_Sea3
{
	decl
	{
        stream[0];

        float v0[3];	// Position
        float v1[3];	// Normal
        float v2[2];	// Tex coord 0
    }
	asm
	{
		 vs.1.1

		m4x4 r0, v0, c[24 ]
		mov  oPos, r0
		 
		mul r11.z, r0.z, c[1  ].w  
		expp r11.z, r11.z  
		rcp r11.z, r11.z  
		mov oFog.x, r11.z

		mov r4, v1
		 
		dp3 r4.w, r4, r4 
		rsq r4.w, r4.w 
		mul r4, r4, r4.w 

		sub r1, v0, c[23  ]
		 
		dp3 r1.w, r1, r1 
		rsq r1.w, r1.w 
		mul r1, r1, r1.w  
		 
		dp3 r7 .x, r1, r4 
		mov r5.x, -r7 .x
		mov r5.yz, c[28 + 6].xxy
		  
		mul r10.xy,  r5.xy,  r5.xy  
		mad r10.z, r10.y, r10.x, -r10.y  
		add r10.z, r10.z, c[0  ].y 
		 
		rsq r9.x, r10.z  
		mul r9.x, r10.z, r9.x  
		 
		mad r10.y,  r5.y, r9.x,  r5.x  
		mad r10.x, - r5.y, r9.x,  r5.x  
		rcp r9.y, r10.y  
		 
		mad r10.w,  r5.y,  r5.x, r9.x  
		mad r10.z,  r5.y,  r5.x, -r9.x   
		rcp r9.z, r10.w  
		 
		mul r9.yz, r9.xyz, r10.xxz 
		mul r9.xw, r9.yyyz, r9.yyyz 
		 
		add r7 .y, r9.x, r9.w 
		mul r7 .y, r7 .y, c[0  ].z  
		min r7 .y, r7 .y,  r5.z 
		 
		rcp r2.x, r1.y
		mul r2.x, r2.x, c[28].x
		min r2.x, r2.x, -r2.x
		expp r7 .z, r2.x 

		mul r2.y, c[28].y, r7 .y
		dp3 r3.x, c[28 + 30], r4
		mul r3.y, r3.x, r2.y
		mul oD0.xyz, r3.yyy, c[28 + 2] 

		mad r2.x, -r7 .y, r7 .z, r7 .z
		mul oD0.w, r2.x, c[28].z 

		sub r2.xy, c[0  ].yy, r7 .yz 
		mul r2.z, r2.x, r2.y
		mul oD1.xyz, r2.zzz, c[28 + 1] 
		mov oD1.w, c[0  ].y 

		mov r1, v0
		;mov r1.y, c[0].y
 		m4x4 r0, r1, c[24]
		rcp r1.w, r0.w
		mul r0.xyz, r0.xyz, r1.w
 		mul r0.xyz, r0.xyz, c[0].zzz
		mul r0.y, r0.y, c[1].y
		add r0.xy, r0.xy, c[0].zz
		add r0.xy, r0.xy, c[0].ww

 		mov oT3, r0

		add r0.xy, r0.xy, v1.xz
 		
 		mov oT1, r0

		mov oT0.z, c[2].x
		mov oT0.xy, v2

		mov oT2.z, c[2].x
		mov oT2.xy, v2
	}
}

PixelShader ps_Sea3
{
	asm
	{
		ps.1.1
		
		tex t0	
		texbem t1, t0

		tex t2
		texbem t3, t2

		mad r0.xyz, v0, t1, v1
		add r0.xyz, r0, t3
		mov r0.w, v0.w
	}
}

block Sea3()
{
	technique t0
	{
		pass p0
		{
			FogTableMode = none;
			FogVertexMode = none;
			CullMode = none;
			ColorVertex = true;
			SpecularEnable = false;
			SrcBlend = one;
			DestBlend = srcalpha;
			Lighting = false;
			LocalViewer = false;
			NormalizeNormals = false;

		    AlphaBlendEnable = true;
			AlphaTestEnable = false;

			AddressU[1] = clamp;
			AddressV[1] = clamp;

			AddressU[3] = clamp;
			AddressV[3] = clamp;

			VertexShader = "vs_Sea3";
			PixelShader = "ps_Sea3";

			Render.Draw

			Restore.States
		}
	}
}

